<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZxpkAAHwAABmK
        GSsNhQ3EDYUNxBiJGC0AZQAAhruGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT6NPAABz
        AAAWiRY5B4MHywCAAP8AgAD/B4IHzhSIFD3///8AZ6xnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACaO
        JgD///8AGosaTQWCBdwAgAD/AIAA/wCAAP8AgAD/BoIG4RKHEk////8ABIIEAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAfwAA6enpAASCBE8EgQTkAIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AYEB5RWJFVyJuokDS6BLAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAIEAAAAgAAAAfwBPAIAA5QCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/BoIG8BmJ
        GWdsqmwDPpg+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADuWOwAAAAAACIMITwCAAOQAgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8AgAD/BYIF8BqLGmPL3csBII4gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAWiBYAFIYUABiKGEkFggXkAIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8AgAD/AIAA/wCAAP8AgAD/A4ED6A6FDlAAAAAAZKxkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAARJhEABCGEAAWiRYzBYIF1wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/BoIG4RaJFj4AeQAAYqpiAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaixoAIY4hHgiDCMIAgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/B4IHzBqKGiUShxIAUKBQAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKJAoADeWNwoLhAucAYAB/wCAAP8AgAD/AIAA/wCA
        AP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8BgAH/CYMJqSOO
        Iw4djB0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEWdRQAATgAAE4gTaQKBAvgAgAD/AIAA/wCA
        AP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8CgAL7C4QLcwAAAAAmjyYAAAAAAAAAAAAAAAAAAAAAAAAAAAC517kAE4gTAB6MHi0GggbeAIAA/wCA
        AP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8AgAD/AIAA/wCAAP8DgQPjFYgVNQ6FDgA2kjYAAAAAAAAAAAAAAAAAAAAAACaOJgBBmUEFDIUMnAGA
        Af8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8LhAuoPZo9CTCUMAAAAAAAAAAAAAAAAACNvY0ACIIIABCG
        EDwDgQPsAIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wOBA/MXiRdIBYIFAH65fgAAAAAAAAAAADmX
        OQCMuYwCDIQMmwCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8CgQL6FIgUyAmECd0AgAD/BIEE+BaJ
        FsYJhAnhAIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wyFDKNorGgEQpxCAAAA
        AAAAAAAAG4obAB6LHiAFggXcAIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wiDCOxCnEIvEocSfgGA
        Af8CgALaNZQ1HAeEB4UAgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/BoIG4iCN
        ICUfjB8AAAAAAAAAAAAMhAwAGIoYUAOBA/oAgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/C4UL60qg
        Sigaihp6AoEC/wB/ANYBeQESBoMGgACAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8CgQL7E4cTVAeCBwAAAAAAAAAAAAB/AAAKgwpvAYAB/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8MhQzrU6RTJyGNIXoCgQL/AH8A1gF7ARIFggV0AH8A6wB/AOgEgQT0AYAB/wCAAP8AgAD/AIAA/wCA
        AP8AgAD/AIAA/wCAAP8HggdxAIAAAAAAAAAAAAAAAIAAAAB+AHIAgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8AgAD/AIAA/wOBA90ljiUZI44jewKBAv8AfwDWAH0AFQN9AxEAegAkBn0GJB6LHjsOhg6ZAoEC+gCA
        AP8AgAD/AIAA/wCAAP8AgAD/AIAA/wB+AHIAgAAAAAAAAAAAAAAAgAAAAX8BcgCAAP8AgAD/AIAA/wCA
        AP8AgAD/AIAA/wCAAP8AgAD/BIEE3iePJxkjjiN7AoEC/wB/ANYAfQAUBIEEPwB/AIIGggaAGYkZQjmX
        OQ8Igwi6AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AH4AcgCAAAAAAAAAAAAAAAB/AAAQhhBpAYAB/wCA
        AP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8NhQ3rVKVUJyGNIXoCgQL/AH8A1gF7ARIGgwaAAIAA/wCA
        AP8GggbKKpEqDQqECooAgAD/AIAA/wCAAP8AgAD/AIAA/wGAAf8QhhBtAH8AAAAAAAAAAAAADoUOABWI
        FUgDgQP4AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wyFDOtMoUwoG4sbegKBAv8AfwDWAHkAEgqE
        CnMJgwnqCYMJ4QmDCY1GnUYICYMJoACAAP8AgAD/AIAA/wCAAP8AgAD/AoEC+RWIFUoMhAwAAAAAAAAA
        AAAgjCAAIY0hIwWCBeIAgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/CYMJ7DyZPCkQhhB7AYAB/wOA
        A9oeih4ZM5YzEjyZPCdDnEMfM5UzCxCHEEYEgQTmAIAA/wCAAP8AgAD/AIAA/wCAAP8GggbkI44jJSKO
        IgAAAAAAAAAAAEKcQgBWpVYGDIUMrwCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8DgQP4EocStQiD
        CNEAgAD/BIIE9hSIFLQWiRalFIgUpA6GDqQHgwezA4ED6gCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wuE
        C7BUo1QHRZ1FAAAAAAAAAAAA5urmAAB8AAAViRVdAoEC+wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8CgQL7EYcRXQB9AADB2MEAAAAAAAAAAAAAAAAAJ5AnAC2TLRMKhArDAIAA/wCAAP8AgAD/AIAA/wCA
        AP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8AgAD/AIAA/weCB8MgjCATHIocAAAAAAAAAAAAAAAAAAAAAAB3tncAAHoAABOIE0wEgQTvAIAA/wCA
        AP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8AgAD/AIAA/wCAAP8DgQPwFIgUTwB/AABUpVQAAAAAAAAAAAAAAAAAAAAAAAAAAAA7mTsAYqhiBA+G
        D3wDgQP6AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8AgAD/AIAA/wCAAP8AgAD/A4ED+xCGEH9Hm0cDLZItAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAA9mz0ASaBJDBKIEogCgQL2AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8AgAD/AIAA/wCAAP8AgAD/AIAA/wKBAvYSiBKJUaRRDUGdQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAijiIAJ5AnBxGHEWMGggbcAYAB/wCAAP8AgAD/AIAA/wCAAP8AgAD/AIAA/wCA
        AP8AgAD/AIAA/wCAAP8AgAD/AIAA/wGAAf8FggXeEocSZiSOJAchjSEAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABHnUcA3djdAB2MHSkMhQyLBYIF2wKBAvsAgAD/AIAA/wCA
        AP8AgAD/AIAA/wCAAP8AgAD/AIAA/wKBAvsGgwbeC4QLjBmKGSm2z7YBUaNRAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQZxBAFalVgIhjSElFIgUagyF
        DKsLhAvaA4ED6Q6FDvsPhg/9BYEF6wuFC9oMhQyrE4cTaiOOIydTpVMDQJ1AAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//w////4H///8A///+AD///AAf//gAD//wAA//4AAH/8AAA/+AAAH/gA
        AB/wAAAP4AAAB+AAAAfAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAAD4AAAB+AA
        AAfwAAAP8AAAD/gAAB/8AAA//wAAf/+AAf8=
</value>
  </data>
</root>